{"version":3,"sources":["App.js","apiConfig.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","event","target","value","onKeyPress","key","fetch","then","res","json","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateGetter","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAiFeA,MA5Ef,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA4CA,OACA,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAqD,WAA5BH,EAAQA,QAAQ,GAAGG,KAAqB,aAAe,MAAS,WAAzH,SACC,iCACC,qBAAKD,UAAU,aAAf,SACC,uBAAOE,KAAK,OACNF,UAAU,eACTG,YAAY,SACZC,SAAU,SAACC,GAAD,OAAWR,EAASQ,EAAMC,OAAOC,QAC3CA,MAAOX,EACPY,WAnDK,SAACH,GACI,UAAdA,EAAMI,KACPC,MAAM,GAAD,OCXG,0CDWH,sBAAwBd,EAAxB,iCCVG,qCDWPe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLb,EAAWa,GACZf,EAAS,IACTiB,QAAQC,IAAIH,WA+Ca,oBAAhBd,EAAQG,KACtB,8BACC,sBAAKD,UAAU,eAAf,UACC,sBAAKA,UAAU,WAAf,UAA2BF,EAAQkB,KAAnC,KAA2ClB,EAAQmB,IAAIC,WACvD,uBACA,qBAAKlB,UAAU,OAAf,SA/CgB,SAACmB,GACpB,IAuBKC,EATO,CACZ,SACA,SACA,UACA,YACA,WACA,SACA,YAEgBD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBU,CACf,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaoBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACf,MAAM,GAAN,OAAUP,EAAV,aAAkBI,EAAlB,YAA2BF,EAA3B,YAAmCI,GAmBRE,CAAW,IAAIC,QACtC,sBAAK7B,UAAU,cAAf,UACO,sBAAKA,UAAU,cAAf,UAA8B8B,KAAKC,MAAMjC,EAAQG,KAAK+B,MAAtD,WACN,qBAAKhC,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,eAI1C,SE/DMgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7eadaec1.chunk.js","sourcesContent":["import React, { useState }from 'react'\n// import { Route } from 'react-router-dom'\nimport './App.css';\nimport { apiUrl, apiKey } from './apiConfig'\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n  \n  const search = (event) => {\n    if (event.key === 'Enter') {\n       fetch(`${apiUrl}/weather?q=${query}&units=imperial&APPID=${apiKey}`)\n       .then((res) => res.json())\n       .then((res) => {\n         setWeather(res)\n        setQuery('')\n        console.log(res)\n        })\n    }\n  }\n\n  const dateGetter = (d) => {\n  const months = [\n\t\t'January',\n\t\t'February',\n\t\t'March',\n\t\t'April',\n\t\t'May',\n\t\t'June',\n\t\t'July',\n\t\t'August',\n\t\t'September',\n\t\t'October',\n\t\t'November',\n\t\t'December',\n\t]\n\tconst days = [\n\t\t'Sunday',\n\t\t'Monday',\n\t\t'Tuesday',\n\t\t'Wednesday',\n\t\t'Thursday',\n\t\t'Friday',\n\t\t'Saturday',\n\t]\n const day = days[d.getDay()]\n const date = d.getDate()\n const month = months[d.getMonth()]\n const year = d.getFullYear()\n return `${day}, ${month} ${date} ${year}` \n}\n  return (\n\t\t<div className={(typeof weather.main != 'undefined') ? ((weather.weather[0].main === 'Clouds') ? 'app-cloudy' : 'app') : 'app-base'}>\n\t\t\t<main>\n\t\t\t\t<div className='search-bar'>\n\t\t\t\t\t<input type='text'\n           className='search-input'\n            placeholder='Search'\n            onChange={(event) => setQuery(event.target.value)}\n            value={query}\n            onKeyPress={search}\n            />\n\t\t\t\t</div>\n        {(typeof weather.main != 'undefined') ? (\n\t\t\t<div>\n\t\t\t\t<div className='location-box'>\n\t\t\t\t\t<div className='location'>{weather.name}, {weather.sys.country}</div>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<div className='date'>{dateGetter(new Date())}</div>\n\t\t\t\t\t<div className='weather-box'>\n            <div className=\"temperature\">{Math.round(weather.main.temp)}Â°F</div>\n\t\t\t\t\t\t<div className='weather'>{weather.weather[0].main}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\t) : ('') }\n\t\t\t</main>\n\t\t</div>\n\t)\n}\n\nexport default App;\n","const apiUrl = 'https://api.openweathermap.org/data/2.5'\nconst apiKey = 'c1d51f580fdc52b711600df2be150360'\nexport { apiUrl, apiKey }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}